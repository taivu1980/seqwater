<?php

/**
 * @file
 * Main file of Linked Field module.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function linked_field_field_formatter_info_alter(&$infos) {
  foreach ($infos as &$info) {
    // Add a settings array if no settings were found.
    if (!isset($info['settings']) || !is_array($info['settings'])) {
      $info['settings'] = array();
    }

    $info['settings'] += array(
      'linked_field' => array(
        'linked' => 0,
        'destination' => '',
        'advanced' => array(
          'title' => '',
          'target' => '',
          'class' => '',
          'rel' => '',
          'text' => '',
        ),
      ),
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function linked_field_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Break when no linked field settings were found.
  if (!isset($settings['linked_field'])) {
    // We have to put something in the summary so that we can ever
    // set Linked Field settings.
    $summary .= ' ';
    return;
  }

  // Normalize the settings.
  $linked = $settings['linked_field']['linked'];
  $destination = $settings['linked_field']['destination'];
  $title = $settings['linked_field']['advanced']['title'];
  $target = $settings['linked_field']['advanced']['target'];
  $class = $settings['linked_field']['advanced']['class'];
  $rel = $settings['linked_field']['advanced']['rel'];
  $text = $settings['linked_field']['advanced']['text'];

  $summary_items = array();
  $summary_items[] = t('Destination: @destination', array('@destination' => $destination));

  if ($title) {
    $summary_items[] = t('Title: @title', array('@title' => $title));
  }

  if ($target) {
    $summary_items[] = t('Target: <code>@target</code>', array('@target' => $target));
  }

  if ($class) {
    $summary_items[] = t('Class: <code>@class</code>', array('@class' => $class));
  }

  if ($rel) {
    $summary_items[] = t('Relationship: <code>@rel</code>', array('@rel' => $rel));
  }

  if ($text) {
    $summary_items[] = t('Text: @text', array('@text' => $text));
  }

  if ($linked && $destination) {
    $summary .= theme('item_list', array('items' => $summary_items, 'title' => 'Linked Field'));
  }
  else {
    $summary .= ' ';
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function linked_field_field_formatter_settings_form_alter(&$settings_form, $context) {
  $field = $context['field'];
  $entity_type = $context['instance']['entity_type'];
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $settings_form['linked_field'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('linked-field-linked-wrapper')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'linked_field') . '/css/linked-field.css',
      ),
    ),
  );

  $settings_form['linked_field']['linked'] = array(
    '#title' => t('Link this field'),
    '#type' => 'checkbox',
    '#default_value' => $settings['linked_field']['linked'],
  );

  $settings_form['linked_field']['destination'] = array(
    '#title' => t('Destination'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['destination'],
    '#description' => t('Here you can enter a token which will be used as link url.'),
    '#element_validate' => array('linked_field_element_validate_destination'),
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['advanced'] = array(
    '#title' => t('Advanced'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $settings_form['linked_field']['advanced']['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['title'],
    '#description' => t('Here you can enter a token which will be used as link <em>title</em> attribute.'),
  );

  $settings_form['linked_field']['advanced']['target'] = array(
    '#title' => t('Target'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['target'],
    '#description' => t('Here you can enter a token which will be used as link <em>target</em> attribute..'),
  );

  $settings_form['linked_field']['advanced']['class'] = array(
    '#title' => t('Class'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['class'],
    '#description' => t('Here you can enter a token which will be used as link <em>class</em> attribute.'),
  );

  $settings_form['linked_field']['advanced']['rel'] = array(
    '#title' => t('Relationship'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['rel'],
    '#description' => t('Here you can enter a token which will be used as link <em>rel</em> attribute.'),
  );

  $settings_form['linked_field']['advanced']['text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield',
    '#default_value' => $settings['linked_field']['advanced']['text'],
    '#description' => t('Here you can enter a token which will be used as link text. Note that the actual field output will be overridden.'),
  );

  $settings_form['linked_field']['token'] = array(
    '#type' => 'container',
    '#theme' => 'token_tree',
    '#token_types' => array($entity_type),
    '#dialog' => TRUE,
    '#states' => array(
      'visible' => array(
        'input[name$="[settings][linked_field][linked]"]' => array('checked' => TRUE),
      ),
    ),
  );

}

/**
 * Implements hook_field_attach_view_alter().
 */
function linked_field_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = $output[$field_name];
    $view_modes = field_view_mode_settings($element['#entity_type'], $element['#bundle']);

    // Check whether set view mode has custom settings.
    if (isset($view_modes[$context['view_mode']]) && !$view_modes[$context['view_mode']]['custom_settings']) {
      $context['view_mode'] = 'default';
    }

    $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);

    // Check whether view mode exists in the field instance.
    if (isset($instance['display'][$context['view_mode']])) {
      $display = $instance['display'][$context['view_mode']];
    }
    // If no view mode was specified it should be set to '_custom'
    // like in field_view_field().
    elseif ($context['view_mode'] == '_custom' && is_array($context['display'])) {
      $display = $context['display'];
    }
    // Otherwise we use the 'default' view mode.
    else {
      $display = $instance['display']['default'];
    }

    $settings = $display['settings'];

    // Continue to next if no Linked Field settings were found.
    if (!isset($settings['linked_field'])) {
      continue;
    }

    // Normalize the settings.
    $linked = $settings['linked_field']['linked'];
    $destination = $settings['linked_field']['destination'];
    $title = $settings['linked_field']['advanced']['title'];
    $target = $settings['linked_field']['advanced']['target'];
    $class = $settings['linked_field']['advanced']['class'];
    $rel = $settings['linked_field']['advanced']['rel'];
    $text = $settings['linked_field']['advanced']['text'];

    // If the destination field isn't filled for this field, we shouldn't
    // do anything. Continue to the next field.
    if (!$destination || !$linked) {
      continue;
    }

    // Replace tokens and filter the value.
    $destination = token_replace($destination, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE));
    $title = $title ? filter_xss_admin(token_replace($title, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE))) : '';
    $target = $target ? check_plain(token_replace($target, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE))) : '';
    $class = $class ? check_plain(token_replace($class, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE))) : '';
    $rel = $rel ? check_plain(token_replace($rel, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE))) : '';
    // Would be better to have own set with allowed tags so that only
    // inline elements are allowed.
    $text = $text ? filter_xss_admin(token_replace($text, array($element['#entity_type'] => $element['#object']), array('clear' => TRUE))) : '';

    // Parse the destination to get queries and fragments working.
    $destination_parsed = drupal_parse_url($destination);

    // Generate a correct link.
    $path = url($destination_parsed['path'], $destination_parsed);

    // Building the attributes for the link.
    $attributes = array(
      'href' => $path,
      'title' => $title,
      'target' => $target,
      'class' => $class,
      'rel' => $rel,
    );

    foreach (element_children($element) as $delta) {
      if (!$text) {
        $rendered = drupal_render($element[$delta]);
      }
      else {
        $rendered = $text;
      }
      // Convert HTML code to a DOMDocument object.
      $html_dom = filter_dom_load($rendered);
      // Getting the <body> element.
      $body = $html_dom->getElementsByTagName('body');
      $nodes = $body->item(0);

      // Recursively walk over the DOMDocument body and place the links.
      linked_field_link_field($nodes, $html_dom, $attributes);

      // Converting the DOMDocument object back to HTML code.
      $rendered = filter_dom_serialize($html_dom);
      $output[$field_name][$delta] = array('#markup' => $rendered);
    }
  }
}

/**
 * Form element validation handler for destination field in settings form.
 */
function linked_field_element_validate_destination($element, &$form_state) {
  $value = $element['#value'];
  // We can hardcode the key because it is ever the same structure.
  $field = $element['#array_parents'][1];
  // Get 'linked' value.
  $linked = $form_state['values']['fields'][$field]['settings_edit_form']['settings']['linked_field']['linked'];
  // If this field should be linked, the destination field is required.
  if ($linked && !$value) {
    form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
  }
}

/**
 * Recursive function for linking text parts and images in DOMNodes.
 *
 * @param DOMNode $node
 *   An object which gets investigated.
 * @param DOMDocument $dom
 *   An object which represents an entire HTML or XML document.
 * @param array $attributes
 *   An array containing element attributes.
 */
function linked_field_link_field($node, $dom, $attributes) {
  if ($node->hasChildNodes() && $node->nodeName != 'a') {
    $c = $node->childNodes->length;
    for ($i = $c; $i > 0; --$i) {
      $child = $node->childNodes->item($i - 1);
      linked_field_link_field($child, $dom, $attributes);
      if ($child->nodeType == XML_TEXT_NODE) {
        $text = $child->textContent;
        if (strlen(trim($text))) {
          // Convert all applicable characters to HTML entities.
          $text = htmlentities($text, ENT_QUOTES, 'UTF-8');
          // Create new <a> element, set the text and the href attribute.
          $element = $dom->createElement('a', $text);

          // Adding the attributes.
          foreach ($attributes as $name => $value) {
            if ($value) {
              // Convert all HTML entities back to their applicable characters.
              $value = html_entity_decode($value);
              $element->setAttribute($name, $value);
            }
          }

          // Replace the the original element with the new one.
          $node->replaceChild($element, $child);
        }
      }
      elseif ($child->nodeName == 'img') {
        // Create new <a> element, set the href and append the image.
        $element = $dom->createElement('a');

        // Adding the attributes.
        foreach ($attributes as $name => $value) {
          if ($value) {
            // Convert all HTML entities back to their applicable characters.
            $value = html_entity_decode($value);
            $element->setAttribute($name, $value);
          }
        }

        $node->replaceChild($element, $child);
        $element->appendChild($child);
      }
    }
  }
}
