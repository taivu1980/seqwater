<?php
/**
 * @file
 *   Defines a new field type, allowing to directly reference Scald Atoms from
 *   a node.
 */

/**
 * Implements hook_library().
 */
function atom_reference_library() {
  $path = drupal_get_path('module', 'atom_reference');
  $libraries['library'] = array(
    'title' => 'Atom reference library',
    'website' => 'http://drupal.org/project/scald',
    'version' => '1.x',
    'js' => array(
      $path . '/atom_reference.js' => array(),
    ),
    'css' => array(
      $path . '/atom_reference.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_info().
 */
function atom_reference_field_info() {
  return array(
    'atom_reference' => array(
      'label' => t('Atom Reference'),
      'description' => t('This field stores the ID of a related atom as an integer value.'),
      'instance_settings' => array(
        'referencable_types' => array()
      ),
      'default_widget' => 'textfield',
      'default_formatter' => 'title',
      'property_type' => 'scald_atom',
    )
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function atom_reference_field_instance_settings_form($field, $instance) {
  $options = array();
  foreach(scald_types() as $name => $type) {
    $options[$name] = $type->title;
  }
  $form = array();
  $form['referencable_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Atom types that can be referenced'),
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => $instance['settings']['referencable_types']
  );
  return $form;
}

/**
 * Implements hook_field_views_data().
 */
function atom_reference_field_views_data($field) {
  $data = field_views_field_default_views_data($field);
  $current_table = _field_sql_storage_tablename($field);
  $column = _field_sql_storage_columnname($field['field_name'], 'sid');

  // Relationship: add a relationship for related atom.
  $data[$current_table][$column]['relationship'] = array(
    'base' => 'scald_atoms',
    'field' => $column,
    'handler' => 'views_handler_relationship',
    'label' => $data[$current_table][$field['field_name']]['title'],
    'field_name' => $field['field_name'],
  );

  return $data;
}

/**
 * Implements hook_field_validate().
 */
function atom_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Ensure that the types of the referenced atoms match the one of those
  // that were defined in the field configuration.
  $types = atom_reference_field_referenceable_types($instance);
  foreach ($items as $delta => $item) {
    if (empty($item['sid'])) {
      continue;
    }
    $atom = scald_fetch($item['sid']);
    if (!isset($types[$atom->type]) || empty($types[$atom->type])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'atom_reference_bad_type',
        'message' => t("Atom %title is of type %type, which can't be referenced in field %field", array('%title' => $atom->title, '%type' => $atom->type, '%field' => $instance['label']))
      );
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function atom_reference_field_is_empty($item, $field) {
  return empty($item['sid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function atom_reference_field_formatter_info() {
  // Expose all the Scald Contexts as formatters for the Atom Reference field.
  $formatters = array();
  $contexts = scald_contexts();
  foreach ($contexts as $name => $context) {
    if (empty($context['hidden'])) {
      $formatters[$name] = array(
        'label' => $context['title'],
        'field types' => array('atom_reference')
      );
    }
  }

  return $formatters;
}

/**
 * Implements hook_field_formatter_view.
 */
function atom_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $render_context = $display['type'];
  $contexts = scald_contexts();
  $element = array();

  if (!empty($contexts[$render_context])) {
    foreach ($items as $delta => $item) {
      $sid = $item['sid'];
      $element[$delta] = array('#markup' => scald_render($sid, $render_context));
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info.
 */
function atom_reference_field_widget_info() {
  return array(
    'atom_reference_textfield' => array(
      'label' => t('Drop box'),
      'field types' => array('atom_reference'),
    )
  );
}

/**
 * Implements hook_field_widget_form.
 */
function atom_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $all = scald_types();
  $options = array();
  $types = atom_reference_field_referenceable_types($instance);

  foreach ($types as $name => $value) {
    if ($value && isset($all[$name])) {
      $options[$name] = $all[$name]->title;
    }
  }

  $help = format_plural(
    count($options),
    'Allowed resource format: %types',
    'Allowed resource formats: %types',
    array('%types' => implode(', ', $options))
  );

  $element['#description'] .= ' ' . $help;
  $element['#type'] = 'textfield';
  $element['#attributes'] = array('data-types' => implode(',', array_keys($options)));
  $element['#default_value'] = isset($items[$delta]) ? $items[$delta]['sid'] : '';
  $element['#process'][] = 'atom_reference_field_widget_form_process';

  // Attach our JS and CSS to the element
  $path = drupal_get_path('module', 'atom_reference');
  $element['#attached'] = array('library' => array(array('atom_reference', 'library')));

  return array('sid' => $element);
}

/**
 * Atom types that are allowed to be referenced in that field instance.
 */
function atom_reference_field_referenceable_types($instance) {
  $types = $instance['settings']['referencable_types'];
  $all = scald_types();

  // All types are allowed if no type is explicitely selected (default setting).
  if (!array_filter($types)) {
    $types = array_fill_keys(array_keys($all), '1');
  }

  return $types;
}

/**
 * Process the Atom Reference widget element.
 *
 * Add either the atom reference representation or the placeholder
 * on the fly, depending on the field being filled.
 */
function atom_reference_field_widget_form_process(&$element) {
  // Get the default value, and format the placeholder accordingly.
  $default = $element['#value'];
  if ($default) {
    $prefix = '<div class="atom_reference_drop_zone">' . scald_render($default, variable_get('dnd_context_default', 'sdl_editor_representation')) .'</div>';
  }
  else {
    $placeholder = t('Drop a resource here');
    $prefix = '<div class="atom_reference_drop_zone"><em>' . $placeholder . '</em></div>';
  }
  $element['#field_prefix'] = $prefix;
  return $element;

}

/**
 * Implements hook_field_widget_error.
 */
function atom_reference_field_widget_error($element, $error, $form, &$form_state) {
  $name = implode('][', $element['sid']['#array_parents']);
  form_set_error($name, $error['message']);
}
